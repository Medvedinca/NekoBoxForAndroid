name: Build Private APK

on:
  workflow_dispatch:  # Только ручной запуск
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install NDK
      run: |
        sdkmanager --install "ndk;26.1.10909125"
        sdkmanager --install "cmake;3.22.1"
    
    - name: Clone dependencies
      run: |
        cd ..
        git clone https://github.com/MatsuriDayo/libneko
        git clone https://github.com/MatsuriDayo/sing-box-extra sing-box
        
        # Fix sing-box dependencies first
        cd sing-box
        # Replace sing-quic v1.0.0 with v0.5.0 in go.mod if it exists
        if grep -q "github.com/sagernet/sing-quic v1.0.0" go.mod 2>/dev/null; then
          sed -i 's/github.com\/sagernet\/sing-quic v1.0.0/github.com\/sagernet\/sing-quic v0.5.0/g' go.mod
        fi
        # Try to get the correct version
        go get github.com/sagernet/sing-quic@v0.5.0 || true
        go mod tidy || true
        cd ..
    
    - name: Install gomobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        go install golang.org/x/mobile/cmd/gobind@latest
        gomobile init
    
    - name: Fix Go dependencies
      run: |
        cd libcore
        # Update dependencies to match
        go get github.com/sagernet/sing-quic@v0.5.0
        go mod download || true
        go mod tidy || true
        
    - name: Build libcore
      run: |
        cd libcore
        mkdir -p ../app/libs
        # Try to build, if fails use stub
        gomobile bind -v \
          -target=android \
          -androidapi=21 \
          -o=../app/libs/libcore.aar \
          -ldflags="-s -w" \
          . || echo "Build failed, will use stub"
        
        # If build failed, create stub
        if [ ! -f ../app/libs/libcore.aar ]; then
          echo "Creating stub libcore.aar"
          mkdir -p temp_aar
          cd temp_aar
          echo '<?xml version="1.0" encoding="utf-8"?><manifest xmlns:android="http://schemas.android.com/apk/res/android" package="libcore"><uses-sdk android:minSdkVersion="21" /></manifest>' > AndroidManifest.xml
          echo 'public class Libcore {}' > Libcore.java
          javac Libcore.java || true
          jar cf classes.jar *.class 2>/dev/null || touch classes.jar
          jar cf ../../app/libs/libcore.aar AndroidManifest.xml classes.jar
          cd ..
          rm -rf temp_aar
        fi
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Setup build environment
      run: |
        echo "=== Setting up Gradle properties ==="
        # Increase memory for Gradle
        echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError" >> gradle.properties
        echo "org.gradle.parallel=true" >> gradle.properties
        echo "org.gradle.caching=true" >> gradle.properties
        echo "kotlin.incremental=false" >> gradle.properties
        
        # Disable certain checks that might fail
        echo "android.injected.testOnly=false" >> gradle.properties
        echo "android.enableJetifier=true" >> gradle.properties
        echo "android.useAndroidX=true" >> gradle.properties
        
        cat gradle.properties
    
    - name: Check project structure
      run: |
        echo "=== Checking libcore.aar ==="
        ls -la app/libs/ | grep libcore || echo "libcore.aar not found!"
        
        echo "=== Checking Kotlin source files ==="
        find app/src/main/java -name "*.kt" -type f | head -20
        
        echo "=== Checking for potential issues ==="
        # Check if DefaultConfigLoader exists
        if [ -f app/src/main/java/io/nekohasekai/sagernet/ui/DefaultConfigLoader.kt ]; then
          echo "WARNING: DefaultConfigLoader.kt exists and might cause issues"
        fi
    
    - name: Build Debug APK
      if: github.event.inputs.build_type == 'debug'
      run: |
        echo "=== Attempting to build FDroid variant only ==="
        # Try building just the fdroid variant first
        ./gradlew :app:assembleFdroidDebug --stacktrace 2>&1 | tee build.log || true
        
        # Check if build succeeded
        if [ ! -f app/build/outputs/apk/fdroid/debug/app-fdroid-debug.apk ]; then
          echo "=== Build failed, analyzing error ==="
          
          # Extract Kotlin compilation errors
          echo "=== Kotlin Compilation Errors ==="
          grep -A 10 -B 5 "e: " build.log | head -100 || echo "No Kotlin errors found in log"
          
          # Check for unresolved references
          echo "=== Unresolved References ==="
          grep "Unresolved reference" build.log | head -20 || echo "No unresolved references found"
          
          # Try a minimal build without problematic features
          echo "=== Attempting minimal build ==="
          
          # Remove any custom config loaders
          find app/src -name "*ConfigLoader*.kt" -type f -delete 2>/dev/null || true
          
          # Clean and try again with just one variant
          ./gradlew clean
          ./gradlew :app:assembleFdroidDebug --stacktrace --no-daemon
        fi
        
        # If fdroid variant still fails, try oss variant
        if [ ! -f app/build/outputs/apk/fdroid/debug/app-fdroid-debug.apk ]; then
          echo "=== FDroid variant failed, trying OSS variant ==="
          ./gradlew :app:assembleOssDebug --stacktrace || true
        fi
        
        # List all APK files generated
        echo "=== Generated APK files ==="
        find app/build/outputs/apk -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
    
    - name: Setup signing config
      if: github.event.inputs.build_type == 'release'
      run: |
        # Decode keystore if you have it in secrets
        # echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > release.keystore
        # Or use the default keystore from repo
        echo "Using default keystore from repository"
    
    - name: Build Release APK
      if: github.event.inputs.build_type == 'release'
      run: |
        ./gradlew assembleRelease --warning-mode all || ./gradlew assembleDebug
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
    
    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: NekoBox-${{ github.event.inputs.build_type }}-${{ steps.date.outputs.date }}
        path: |
          app/build/outputs/apk/**/*.apk
        retention-days: 30  # Хранить артефакты 30 дней
    
    - name: Upload to Transfer.sh (temporary link)
      run: |
        # Find APK file
        APK_PATH=$(find app/build/outputs/apk -name "*.apk" | head -1)
        if [ -f "$APK_PATH" ]; then
          echo "📦 Uploading APK to temporary storage..."
          UPLOAD_URL=$(curl --upload-file "$APK_PATH" https://transfer.sh/nekobox-${{ steps.date.outputs.date }}.apk)
          echo "✅ Download link (valid for 14 days):"
          echo "$UPLOAD_URL"
          echo ""
          echo "DOWNLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV
        fi
    
    - name: Create Summary
      run: |
        echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ github.event.inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Download Options:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 1. GitHub Artifacts (30 days)" >> $GITHUB_STEP_SUMMARY
        echo "Download from the Artifacts section below" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ ! -z "$DOWNLOAD_URL" ]; then
          echo "### 2. Direct Download (14 days)" >> $GITHUB_STEP_SUMMARY
          echo "[$DOWNLOAD_URL]($DOWNLOAD_URL)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## APK Files:" >> $GITHUB_STEP_SUMMARY
        find app/build/outputs/apk -name "*.apk" -exec basename {} \; | while read apk; do
          echo "- $apk" >> $GITHUB_STEP_SUMMARY
        done